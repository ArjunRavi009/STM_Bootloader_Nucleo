
Nucleo_st32F446e.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000320c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080033dc  080033dc  000043dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800353c  0800353c  0000453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003544  08003544  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003544  08003544  00004544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003548  08003548  00004548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800354c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  080035a8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080035a8  000052ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099a6  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001947  00000000  00000000  0000ea32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00010380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000644  00000000  00000000  00010bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218e0  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8ca  00000000  00000000  00032adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb2da  00000000  00000000  0003d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  001086c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010acf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080033c4 	.word	0x080033c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080033c4 	.word	0x080033c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fc20 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f892 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9ba 	bl	8000970 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f964 	bl	80008c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f98c 	bl	800091c <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000604:	f000 f8f8 	bl	80007f8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000608:	f000 f92a 	bl	8000860 <MX_CAN2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  /* USER CODE END 3 */
  if ( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800060c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <main+0x4c>)
 8000612:	f000 fff7 	bl	8001604 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d105      	bne.n	8000628 <main+0x3c>
  {
	  /*Entering Boot Loader*/
	  printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 800061c:	4807      	ldr	r0, [pc, #28]	@ (800063c <main+0x50>)
 800061e:	f000 f857 	bl	80006d0 <printmsg>

	  /*Call BootLoader Handler function*/
	  bootloader_Uart_ReadData();
 8000622:	f000 f80f 	bl	8000644 <bootloader_Uart_ReadData>
 8000626:	e004      	b.n	8000632 <main+0x46>
  }
  else
  {

	  printmsg("BL_DEBUG_MSG:Button is NOT pressed .. going to APPL mode\n\r");
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <main+0x54>)
 800062a:	f000 f851 	bl	80006d0 <printmsg>

	  /*Jump to Application Handler function*/
	  bootloader_Jump_UserAppl();
 800062e:	f000 f811 	bl	8000654 <bootloader_Jump_UserAppl>
 8000632:	2300      	movs	r3, #0
  }

}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40020800 	.word	0x40020800
 800063c:	080033dc 	.word	0x080033dc
 8000640:	08003414 	.word	0x08003414

08000644 <bootloader_Uart_ReadData>:


void bootloader_Uart_ReadData(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <bootloader_Jump_UserAppl>:

void bootloader_Jump_UserAppl(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user application.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n\r");
 800065a:	4816      	ldr	r0, [pc, #88]	@ (80006b4 <bootloader_Jump_UserAppl+0x60>)
 800065c:	f000 f838 	bl	80006d0 <printmsg>


    // 1. configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000660:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <bootloader_Jump_UserAppl+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n\r",msp_value);
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	4814      	ldr	r0, [pc, #80]	@ (80006bc <bootloader_Jump_UserAppl+0x68>)
 800066a:	f000 f831 	bl	80006d0 <printmsg>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066e:	b672      	cpsid	i
}
 8000670:	bf00      	nop

    __disable_irq();

    SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <bootloader_Jump_UserAppl+0x6c>)
 8000674:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <bootloader_Jump_UserAppl+0x64>)
 8000676:	609a      	str	r2, [r3, #8]

    printmsg("BL_DEBUG_MSG:VTOR Set value : %#x\n\r",SCB->VTOR);
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <bootloader_Jump_UserAppl+0x6c>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	4619      	mov	r1, r3
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <bootloader_Jump_UserAppl+0x70>)
 8000680:	f000 f826 	bl	80006d0 <printmsg>
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f383 8808 	msr	MSP, r3
}
 800068e:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000690:	b662      	cpsie	i
}
 8000692:	bf00      	nop
    __enable_irq();

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR2_BASE_ADDRESS+4
     */
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <bootloader_Jump_UserAppl+0x74>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n\r",app_reset_handler);
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <bootloader_Jump_UserAppl+0x78>)
 80006a2:	f000 f815 	bl	80006d0 <printmsg>

    //3. jump to reset handler of the user application
    app_reset_handler();
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4798      	blx	r3

}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	08003450 	.word	0x08003450
 80006b8:	08008000 	.word	0x08008000
 80006bc:	0800347c 	.word	0x0800347c
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	0800349c 	.word	0x0800349c
 80006c8:	08008004 	.word	0x08008004
 80006cc:	080034c0 	.word	0x080034c0

080006d0 <printmsg>:
/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 80006d0:	b40f      	push	{r0, r1, r2, r3}
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b096      	sub	sp, #88	@ 0x58
 80006d6:	af00      	add	r7, sp, #0
	char str[80];
#ifdef BL_DEBUG_MSG
	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80006d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006dc:	607b      	str	r3, [r7, #4]
	vsnprintf(str,sizeof(str),format,args);
 80006de:	f107 0008 	add.w	r0, r7, #8
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80006e6:	2150      	movs	r1, #80	@ 0x50
 80006e8:	f002 f9e0 	bl	8002aac <vsniprintf>
	va_end(args);
	HAL_UART_Transmit(C_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd8d 	bl	8000210 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f107 0108 	add.w	r1, r7, #8
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <printmsg+0x48>)
 8000704:	f001 fde8 	bl	80022d8 <HAL_UART_Transmit>
#endif
 }
 8000708:	bf00      	nop
 800070a:	3758      	adds	r7, #88	@ 0x58
 800070c:	46bd      	mov	sp, r7
 800070e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000712:	b004      	add	sp, #16
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	200000c8 	.word	0x200000c8

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2234      	movs	r2, #52	@ 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f002 f9cc 	bl	8002ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a29      	ldr	r2, [pc, #164]	@ (80007f0 <SystemClock_Config+0xd4>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000768:	4a22      	ldr	r2, [pc, #136]	@ (80007f4 <SystemClock_Config+0xd8>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <SystemClock_Config+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000790:	2310      	movs	r3, #16
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000794:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000798:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800079a:	2304      	movs	r3, #4
 800079c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 faa6 	bl	8001cfc <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b6:	f000 f949 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2102      	movs	r1, #2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 ff46 	bl	8001668 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007e2:	f000 f933 	bl	8000a4c <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	@ 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_CAN1_Init+0x60>)
 80007fe:	4a17      	ldr	r2, [pc, #92]	@ (800085c <MX_CAN1_Init+0x64>)
 8000800:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_CAN1_Init+0x60>)
 8000804:	2210      	movs	r2, #16
 8000806:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_CAN1_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_CAN1_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_CAN1_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_CAN1_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_CAN1_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_CAN1_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_CAN1_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_CAN1_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_CAN1_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_CAN1_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_CAN1_Init+0x60>)
 8000846:	f000 fb67 	bl	8000f18 <HAL_CAN_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 f8fc 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000078 	.word	0x20000078
 800085c:	40006400 	.word	0x40006400

08000860 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_CAN2_Init+0x60>)
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <MX_CAN2_Init+0x64>)
 8000868:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_CAN2_Init+0x60>)
 800086c:	2210      	movs	r2, #16
 800086e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_CAN2_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_CAN2_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800087c:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_CAN2_Init+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_CAN2_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000888:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <MX_CAN2_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_CAN2_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_CAN2_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_CAN2_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <MX_CAN2_Init+0x60>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_CAN2_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_CAN2_Init+0x60>)
 80008ae:	f000 fb33 	bl	8000f18 <HAL_CAN_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 f8c8 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000a0 	.word	0x200000a0
 80008c4:	40006800 	.word	0x40006800

080008c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <MX_USART2_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_USART2_UART_Init+0x4c>)
 8000900:	f001 fc9a 	bl	8002238 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f000 f89f 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000c8 	.word	0x200000c8
 8000918:	40004400 	.word	0x40004400

0800091c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	@ (800096c <MX_USART3_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_USART3_UART_Init+0x4c>)
 8000954:	f001 fc70 	bl	8002238 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f000 f875 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000110 	.word	0x20000110
 800096c:	40004800 	.word	0x40004800

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a25      	ldr	r2, [pc, #148]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a17      	ldr	r2, [pc, #92]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <MX_GPIO_Init+0xd4>)
 80009fc:	f000 fe1a 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <MX_GPIO_Init+0xd8>)
 8000a18:	f000 fc60 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_GPIO_Init+0xd4>)
 8000a34:	f000 fc52 	bl	80012dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	@ 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020800 	.word	0x40020800

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a96:	2007      	movs	r0, #7
 8000a98:	f000 fbec 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a43      	ldr	r2, [pc, #268]	@ (8000bd4 <HAL_CAN_MspInit+0x12c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d136      	bne.n	8000b38 <HAL_CAN_MspInit+0x90>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000aca:	4b43      	ldr	r3, [pc, #268]	@ (8000bd8 <HAL_CAN_MspInit+0x130>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a41      	ldr	r2, [pc, #260]	@ (8000bd8 <HAL_CAN_MspInit+0x130>)
 8000ad2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ad4:	4b40      	ldr	r3, [pc, #256]	@ (8000bd8 <HAL_CAN_MspInit+0x130>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10d      	bne.n	8000af8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aec:	4b3b      	ldr	r3, [pc, #236]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	4b37      	ldr	r3, [pc, #220]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b00:	4a36      	ldr	r2, [pc, #216]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b08:	4b34      	ldr	r3, [pc, #208]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b26:	2309      	movs	r3, #9
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	482b      	ldr	r0, [pc, #172]	@ (8000be0 <HAL_CAN_MspInit+0x138>)
 8000b32:	f000 fbd3 	bl	80012dc <HAL_GPIO_Init>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b36:	e048      	b.n	8000bca <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a29      	ldr	r2, [pc, #164]	@ (8000be4 <HAL_CAN_MspInit+0x13c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d143      	bne.n	8000bca <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a24      	ldr	r2, [pc, #144]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b52:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <HAL_CAN_MspInit+0x130>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <HAL_CAN_MspInit+0x130>)
 8000b66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <HAL_CAN_MspInit+0x130>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d10d      	bne.n	8000b8c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a18      	ldr	r2, [pc, #96]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b94:	4a11      	ldr	r2, [pc, #68]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <HAL_CAN_MspInit+0x134>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ba8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000bba:	2309      	movs	r3, #9
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <HAL_CAN_MspInit+0x140>)
 8000bc6:	f000 fb89 	bl	80012dc <HAL_GPIO_Init>
}
 8000bca:	bf00      	nop
 8000bcc:	3730      	adds	r7, #48	@ 0x30
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40006400 	.word	0x40006400
 8000bd8:	20000158 	.word	0x20000158
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40006800 	.word	0x40006800
 8000be8:	40020400 	.word	0x40020400

08000bec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	@ 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a32      	ldr	r2, [pc, #200]	@ (8000cd4 <HAL_UART_MspInit+0xe8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12c      	bne.n	8000c68 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	4a30      	ldr	r2, [pc, #192]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a29      	ldr	r2, [pc, #164]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c46:	230c      	movs	r3, #12
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c56:	2307      	movs	r3, #7
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481e      	ldr	r0, [pc, #120]	@ (8000cdc <HAL_UART_MspInit+0xf0>)
 8000c62:	f000 fb3b 	bl	80012dc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c66:	e031      	b.n	8000ccc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <HAL_UART_MspInit+0xf4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12c      	bne.n	8000ccc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_UART_MspInit+0xec>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000caa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <HAL_UART_MspInit+0xf8>)
 8000cc8:	f000 fb08 	bl	80012dc <HAL_GPIO_Init>
}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	@ 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	40020800 	.word	0x40020800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3e:	f000 f8cb 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f001 feae 	bl	8002ad8 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20020000 	.word	0x20020000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	2000015c 	.word	0x2000015c
 8000db0:	200002b0 	.word	0x200002b0

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <SystemInit+0x28>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <SystemInit+0x28>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <SystemInit+0x28>)
 8000dca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dce:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de4:	f7ff ffe6 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f001 fe69 	bl	8002ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fbeb 	bl	80005ec <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e24:	0800354c 	.word	0x0800354c
  ldr r2, =_sbss
 8000e28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e2c:	200002ac 	.word	0x200002ac

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 fa09 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fdf6 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fa13 	bl	80012c2 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f9e9 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	@ (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000160 	.word	0x20000160

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000160 	.word	0x20000160

08000f18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e0ed      	b.n	8001106 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fdb6 	bl	8000aa8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0201 	orr.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f4c:	f7ff ffd8 	bl	8000f00 <HAL_GetTick>
 8000f50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f52:	e012      	b.n	8000f7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f54:	f7ff ffd4 	bl	8000f00 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d90b      	bls.n	8000f7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e0c5      	b.n	8001106 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0e5      	beq.n	8000f54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0202 	bic.w	r2, r2, #2
 8000f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f98:	f7ff ffb2 	bl	8000f00 <HAL_GetTick>
 8000f9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f9e:	e012      	b.n	8000fc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fa0:	f7ff ffae 	bl	8000f00 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b0a      	cmp	r3, #10
 8000fac:	d90b      	bls.n	8000fc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e09f      	b.n	8001106 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e5      	bne.n	8000fa0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7e1b      	ldrb	r3, [r3, #24]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d108      	bne.n	8000fee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7e5b      	ldrb	r3, [r3, #25]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d108      	bne.n	8001018 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e007      	b.n	8001028 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001026:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7e9b      	ldrb	r3, [r3, #26]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d108      	bne.n	8001042 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0220 	orr.w	r2, r2, #32
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e007      	b.n	8001052 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0220 	bic.w	r2, r2, #32
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7edb      	ldrb	r3, [r3, #27]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0210 	bic.w	r2, r2, #16
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e007      	b.n	800107c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0210 	orr.w	r2, r2, #16
 800107a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7f1b      	ldrb	r3, [r3, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d108      	bne.n	8001096 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0208 	orr.w	r2, r2, #8
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e007      	b.n	80010a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0208 	bic.w	r2, r2, #8
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7f5b      	ldrb	r3, [r3, #29]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d108      	bne.n	80010c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0204 	orr.w	r2, r2, #4
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e007      	b.n	80010d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0204 	bic.w	r2, r2, #4
 80010ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	ea42 0103 	orr.w	r1, r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	1e5a      	subs	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	@ 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff47 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff5c 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb0 	bl	8001230 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e165      	b.n	80015c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	f040 8154 	bne.w	80015be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d005      	beq.n	800132e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	2b02      	cmp	r3, #2
 800132c:	d130      	bne.n	8001390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b03      	cmp	r3, #3
 800139a:	d017      	beq.n	80013cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d123      	bne.n	8001420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	69b9      	ldr	r1, [r7, #24]
 800141c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80ae 	beq.w	80015be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b5d      	ldr	r3, [pc, #372]	@ (80015dc <HAL_GPIO_Init+0x300>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	4a5c      	ldr	r2, [pc, #368]	@ (80015dc <HAL_GPIO_Init+0x300>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001470:	6453      	str	r3, [r2, #68]	@ 0x44
 8001472:	4b5a      	ldr	r3, [pc, #360]	@ (80015dc <HAL_GPIO_Init+0x300>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147e:	4a58      	ldr	r2, [pc, #352]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4f      	ldr	r2, [pc, #316]	@ (80015e4 <HAL_GPIO_Init+0x308>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d025      	beq.n	80014f6 <HAL_GPIO_Init+0x21a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4e      	ldr	r2, [pc, #312]	@ (80015e8 <HAL_GPIO_Init+0x30c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01f      	beq.n	80014f2 <HAL_GPIO_Init+0x216>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4d      	ldr	r2, [pc, #308]	@ (80015ec <HAL_GPIO_Init+0x310>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x212>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4c      	ldr	r2, [pc, #304]	@ (80015f0 <HAL_GPIO_Init+0x314>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x20e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4b      	ldr	r2, [pc, #300]	@ (80015f4 <HAL_GPIO_Init+0x318>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x20a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4a      	ldr	r2, [pc, #296]	@ (80015f8 <HAL_GPIO_Init+0x31c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x206>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a49      	ldr	r2, [pc, #292]	@ (80015fc <HAL_GPIO_Init+0x320>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x202>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00c      	b.n	80014f8 <HAL_GPIO_Init+0x21c>
 80014de:	2307      	movs	r3, #7
 80014e0:	e00a      	b.n	80014f8 <HAL_GPIO_Init+0x21c>
 80014e2:	2305      	movs	r3, #5
 80014e4:	e008      	b.n	80014f8 <HAL_GPIO_Init+0x21c>
 80014e6:	2304      	movs	r3, #4
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x21c>
 80014ea:	2303      	movs	r3, #3
 80014ec:	e004      	b.n	80014f8 <HAL_GPIO_Init+0x21c>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x21c>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_GPIO_Init+0x21c>
 80014f6:	2300      	movs	r3, #0
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	f002 0203 	and.w	r2, r2, #3
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	4093      	lsls	r3, r2
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001508:	4935      	ldr	r1, [pc, #212]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <HAL_GPIO_Init+0x324>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153a:	4a31      	ldr	r2, [pc, #196]	@ (8001600 <HAL_GPIO_Init+0x324>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001540:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <HAL_GPIO_Init+0x324>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001564:	4a26      	ldr	r2, [pc, #152]	@ (8001600 <HAL_GPIO_Init+0x324>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <HAL_GPIO_Init+0x324>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <HAL_GPIO_Init+0x324>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <HAL_GPIO_Init+0x324>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b8:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <HAL_GPIO_Init+0x324>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	f67f ae96 	bls.w	80012f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3724      	adds	r7, #36	@ 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40013800 	.word	0x40013800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40021400 	.word	0x40021400
 80015fc:	40021800 	.word	0x40021800
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0cc      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b68      	ldr	r3, [pc, #416]	@ (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d90c      	bls.n	80016a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b65      	ldr	r3, [pc, #404]	@ (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b63      	ldr	r3, [pc, #396]	@ (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0b8      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016bc:	4b59      	ldr	r3, [pc, #356]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a58      	ldr	r2, [pc, #352]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d4:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a52      	ldr	r2, [pc, #328]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b50      	ldr	r3, [pc, #320]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	494d      	ldr	r1, [pc, #308]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d044      	beq.n	8001788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b47      	ldr	r3, [pc, #284]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d119      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e07f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d003      	beq.n	8001726 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001722:	2b03      	cmp	r3, #3
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	4b3f      	ldr	r3, [pc, #252]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e06f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b3b      	ldr	r3, [pc, #236]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e067      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f023 0203 	bic.w	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4934      	ldr	r1, [pc, #208]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	4313      	orrs	r3, r2
 8001756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001758:	f7ff fbd2 	bl	8000f00 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	e00a      	b.n	8001776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7ff fbce 	bl	8000f00 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e04f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 020c 	and.w	r2, r3, #12
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d1eb      	bne.n	8001760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d20c      	bcs.n	80017b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e032      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4916      	ldr	r1, [pc, #88]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	490e      	ldr	r1, [pc, #56]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ee:	f000 f855 	bl	800189c <HAL_RCC_GetSysClockFreq>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	490a      	ldr	r1, [pc, #40]	@ (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	5ccb      	ldrb	r3, [r1, r3]
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	4a09      	ldr	r2, [pc, #36]	@ (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_RCC_ClockConfig+0x1c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fb32 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00
 8001824:	40023800 	.word	0x40023800
 8001828:	080034f0 	.word	0x080034f0
 800182c:	20000000 	.word	0x20000000
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_RCC_GetHCLKFreq+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000

0800184c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001850:	f7ff fff0 	bl	8001834 <HAL_RCC_GetHCLKFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	0a9b      	lsrs	r3, r3, #10
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	4903      	ldr	r1, [pc, #12]	@ (8001870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	08003500 	.word	0x08003500

08001874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001878:	f7ff ffdc 	bl	8001834 <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0b5b      	lsrs	r3, r3, #13
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	@ (8001898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	08003500 	.word	0x08003500

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a0:	b0ae      	sub	sp, #184	@ 0xb8
 80018a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c2:	4bcb      	ldr	r3, [pc, #812]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	f200 8206 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x440>
 80018d0:	a201      	add	r2, pc, #4	@ (adr r2, 80018d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	0800190d 	.word	0x0800190d
 80018dc:	08001cdd 	.word	0x08001cdd
 80018e0:	08001cdd 	.word	0x08001cdd
 80018e4:	08001cdd 	.word	0x08001cdd
 80018e8:	08001915 	.word	0x08001915
 80018ec:	08001cdd 	.word	0x08001cdd
 80018f0:	08001cdd 	.word	0x08001cdd
 80018f4:	08001cdd 	.word	0x08001cdd
 80018f8:	0800191d 	.word	0x0800191d
 80018fc:	08001cdd 	.word	0x08001cdd
 8001900:	08001cdd 	.word	0x08001cdd
 8001904:	08001cdd 	.word	0x08001cdd
 8001908:	08001b0d 	.word	0x08001b0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4bb9      	ldr	r3, [pc, #740]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x358>)
 800190e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001912:	e1e7      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001914:	4bb8      	ldr	r3, [pc, #736]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001916:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800191a:	e1e3      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4bb4      	ldr	r3, [pc, #720]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001928:	4bb1      	ldr	r3, [pc, #708]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d071      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4bae      	ldr	r3, [pc, #696]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	2200      	movs	r2, #0
 800193c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001940:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800194c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800195a:	4622      	mov	r2, r4
 800195c:	462b      	mov	r3, r5
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	0159      	lsls	r1, r3, #5
 8001968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800196c:	0150      	lsls	r0, r2, #5
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4621      	mov	r1, r4
 8001974:	1a51      	subs	r1, r2, r1
 8001976:	6439      	str	r1, [r7, #64]	@ 0x40
 8001978:	4629      	mov	r1, r5
 800197a:	eb63 0301 	sbc.w	r3, r3, r1
 800197e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800198c:	4649      	mov	r1, r9
 800198e:	018b      	lsls	r3, r1, #6
 8001990:	4641      	mov	r1, r8
 8001992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001996:	4641      	mov	r1, r8
 8001998:	018a      	lsls	r2, r1, #6
 800199a:	4641      	mov	r1, r8
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80019a0:	4649      	mov	r1, r9
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80019b4:	4649      	mov	r1, r9
 80019b6:	00cb      	lsls	r3, r1, #3
 80019b8:	4641      	mov	r1, r8
 80019ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019be:	4641      	mov	r1, r8
 80019c0:	00ca      	lsls	r2, r1, #3
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	4622      	mov	r2, r4
 80019ca:	189b      	adds	r3, r3, r2
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ce:	462b      	mov	r3, r5
 80019d0:	460a      	mov	r2, r1
 80019d2:	eb42 0303 	adc.w	r3, r2, r3
 80019d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019e4:	4629      	mov	r1, r5
 80019e6:	024b      	lsls	r3, r1, #9
 80019e8:	4621      	mov	r1, r4
 80019ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019ee:	4621      	mov	r1, r4
 80019f0:	024a      	lsls	r2, r1, #9
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001a08:	f7fe fc5a 	bl	80002c0 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a16:	e067      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a18:	4b75      	ldr	r3, [pc, #468]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a24:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a32:	2300      	movs	r3, #0
 8001a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	f04f 0000 	mov.w	r0, #0
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	0159      	lsls	r1, r3, #5
 8001a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4c:	0150      	lsls	r0, r2, #5
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4621      	mov	r1, r4
 8001a54:	1a51      	subs	r1, r2, r1
 8001a56:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001a58:	4629      	mov	r1, r5
 8001a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	018b      	lsls	r3, r1, #6
 8001a70:	4641      	mov	r1, r8
 8001a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a76:	4641      	mov	r1, r8
 8001a78:	018a      	lsls	r2, r1, #6
 8001a7a:	4641      	mov	r1, r8
 8001a7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a80:	4649      	mov	r1, r9
 8001a82:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a9a:	4692      	mov	sl, r2
 8001a9c:	469b      	mov	fp, r3
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	eb1a 0303 	adds.w	r3, sl, r3
 8001aa4:	623b      	str	r3, [r7, #32]
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001aba:	4629      	mov	r1, r5
 8001abc:	028b      	lsls	r3, r1, #10
 8001abe:	4621      	mov	r1, r4
 8001ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	028a      	lsls	r2, r1, #10
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ad4:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ad6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ada:	f7fe fbf1 	bl	80002c0 <__aeabi_uldivmod>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ae8:	4b41      	ldr	r3, [pc, #260]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	3301      	adds	r3, #1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b0a:	e0eb      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b0c:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b18:	4b35      	ldr	r3, [pc, #212]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d06b      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b24:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b36:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b38:	2300      	movs	r3, #0
 8001b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b40:	4622      	mov	r2, r4
 8001b42:	462b      	mov	r3, r5
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	0159      	lsls	r1, r3, #5
 8001b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b52:	0150      	lsls	r0, r2, #5
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4621      	mov	r1, r4
 8001b5a:	1a51      	subs	r1, r2, r1
 8001b5c:	61b9      	str	r1, [r7, #24]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	eb63 0301 	sbc.w	r3, r3, r1
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b72:	4659      	mov	r1, fp
 8001b74:	018b      	lsls	r3, r1, #6
 8001b76:	4651      	mov	r1, sl
 8001b78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7c:	4651      	mov	r1, sl
 8001b7e:	018a      	lsls	r2, r1, #6
 8001b80:	4651      	mov	r1, sl
 8001b82:	ebb2 0801 	subs.w	r8, r2, r1
 8001b86:	4659      	mov	r1, fp
 8001b88:	eb63 0901 	sbc.w	r9, r3, r1
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ba0:	4690      	mov	r8, r2
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	eb18 0303 	adds.w	r3, r8, r3
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	462b      	mov	r3, r5
 8001bae:	eb49 0303 	adc.w	r3, r9, r3
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	024b      	lsls	r3, r1, #9
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bca:	4621      	mov	r1, r4
 8001bcc:	024a      	lsls	r2, r1, #9
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bda:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001bdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001be0:	f7fe fb6e 	bl	80002c0 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4613      	mov	r3, r2
 8001bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bee:	e065      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x420>
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	2200      	movs	r2, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	4611      	mov	r1, r2
 8001c08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c0e:	2300      	movs	r3, #0
 8001c10:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001c16:	4642      	mov	r2, r8
 8001c18:	464b      	mov	r3, r9
 8001c1a:	f04f 0000 	mov.w	r0, #0
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	0159      	lsls	r1, r3, #5
 8001c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c28:	0150      	lsls	r0, r2, #5
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4641      	mov	r1, r8
 8001c30:	1a51      	subs	r1, r2, r1
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	4649      	mov	r1, r9
 8001c36:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c48:	4659      	mov	r1, fp
 8001c4a:	018b      	lsls	r3, r1, #6
 8001c4c:	4651      	mov	r1, sl
 8001c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c52:	4651      	mov	r1, sl
 8001c54:	018a      	lsls	r2, r1, #6
 8001c56:	4651      	mov	r1, sl
 8001c58:	1a54      	subs	r4, r2, r1
 8001c5a:	4659      	mov	r1, fp
 8001c5c:	eb63 0501 	sbc.w	r5, r3, r1
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	00eb      	lsls	r3, r5, #3
 8001c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6e:	00e2      	lsls	r2, r4, #3
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	4643      	mov	r3, r8
 8001c76:	18e3      	adds	r3, r4, r3
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	eb45 0303 	adc.w	r3, r5, r3
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8e:	4629      	mov	r1, r5
 8001c90:	028b      	lsls	r3, r1, #10
 8001c92:	4621      	mov	r1, r4
 8001c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c98:	4621      	mov	r1, r4
 8001c9a:	028a      	lsls	r2, r1, #10
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ca8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001caa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cae:	f7fe fb07 	bl	80002c0 <__aeabi_uldivmod>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0f1b      	lsrs	r3, r3, #28
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cda:	e003      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ce2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	37b8      	adds	r7, #184	@ 0xb8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	00f42400 	.word	0x00f42400

08001cfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e28d      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8083 	beq.w	8001e22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d1c:	4b94      	ldr	r3, [pc, #592]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d019      	beq.n	8001d5c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d28:	4b91      	ldr	r3, [pc, #580]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d34:	4b8e      	ldr	r3, [pc, #568]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d40:	d00c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d42:	4b8b      	ldr	r3, [pc, #556]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	d112      	bne.n	8001d74 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	4b88      	ldr	r3, [pc, #544]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d5a:	d10b      	bne.n	8001d74 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	4b84      	ldr	r3, [pc, #528]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d05b      	beq.n	8001e20 <HAL_RCC_OscConfig+0x124>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d157      	bne.n	8001e20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e25a      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x90>
 8001d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7b      	ldr	r2, [pc, #492]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e01d      	b.n	8001dc8 <HAL_RCC_OscConfig+0xcc>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0xb4>
 8001d96:	4b76      	ldr	r3, [pc, #472]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a75      	ldr	r2, [pc, #468]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b73      	ldr	r3, [pc, #460]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a72      	ldr	r2, [pc, #456]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0xcc>
 8001db0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6e      	ldr	r2, [pc, #440]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f896 	bl	8000f00 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff f892 	bl	8000f00 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	@ 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e21f      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b61      	ldr	r3, [pc, #388]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xdc>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f882 	bl	8000f00 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff f87e 	bl	8000f00 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	@ 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e20b      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	4b57      	ldr	r3, [pc, #348]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x104>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06f      	beq.n	8001f0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e2e:	4b50      	ldr	r3, [pc, #320]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d017      	beq.n	8001e6a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d105      	bne.n	8001e52 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e46:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e52:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d11c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5e:	4b44      	ldr	r3, [pc, #272]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d116      	bne.n	8001e98 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_RCC_OscConfig+0x186>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e1d3      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e82:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4937      	ldr	r1, [pc, #220]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	e03a      	b.n	8001f0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea0:	4b34      	ldr	r3, [pc, #208]	@ (8001f74 <HAL_RCC_OscConfig+0x278>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f82b 	bl	8000f00 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eae:	f7ff f827 	bl	8000f00 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1b4      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4925      	ldr	r1, [pc, #148]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
 8001ee0:	e015      	b.n	8001f0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_RCC_OscConfig+0x278>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f80a 	bl	8000f00 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef0:	f7ff f806 	bl	8000f00 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e193      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d036      	beq.n	8001f88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d016      	beq.n	8001f50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f22:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7fe ffea 	bl	8000f00 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f30:	f7fe ffe6 	bl	8000f00 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e173      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x234>
 8001f4e:	e01b      	b.n	8001f88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f50:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <HAL_RCC_OscConfig+0x27c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7fe ffd3 	bl	8000f00 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	e00e      	b.n	8001f7c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7fe ffcf 	bl	8000f00 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d907      	bls.n	8001f7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e15c      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	42470000 	.word	0x42470000
 8001f78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	4b8a      	ldr	r3, [pc, #552]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ea      	bne.n	8001f5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8097 	beq.w	80020c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b83      	ldr	r3, [pc, #524]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	4b7f      	ldr	r3, [pc, #508]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	4a7e      	ldr	r2, [pc, #504]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc6:	4b79      	ldr	r3, [pc, #484]	@ (80021ac <HAL_RCC_OscConfig+0x4b0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d118      	bne.n	8002004 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd2:	4b76      	ldr	r3, [pc, #472]	@ (80021ac <HAL_RCC_OscConfig+0x4b0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a75      	ldr	r2, [pc, #468]	@ (80021ac <HAL_RCC_OscConfig+0x4b0>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fde:	f7fe ff8f 	bl	8000f00 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe6:	f7fe ff8b 	bl	8000f00 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e118      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	4b6c      	ldr	r3, [pc, #432]	@ (80021ac <HAL_RCC_OscConfig+0x4b0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x31e>
 800200c:	4b66      	ldr	r3, [pc, #408]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002010:	4a65      	ldr	r2, [pc, #404]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	@ 0x70
 8002018:	e01c      	b.n	8002054 <HAL_RCC_OscConfig+0x358>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b05      	cmp	r3, #5
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x340>
 8002022:	4b61      	ldr	r3, [pc, #388]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	4a60      	ldr	r2, [pc, #384]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6713      	str	r3, [r2, #112]	@ 0x70
 800202e:	4b5e      	ldr	r3, [pc, #376]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002032:	4a5d      	ldr	r2, [pc, #372]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6713      	str	r3, [r2, #112]	@ 0x70
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0x358>
 800203c:	4b5a      	ldr	r3, [pc, #360]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002040:	4a59      	ldr	r2, [pc, #356]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6713      	str	r3, [r2, #112]	@ 0x70
 8002048:	4b57      	ldr	r3, [pc, #348]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204c:	4a56      	ldr	r2, [pc, #344]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 800204e:	f023 0304 	bic.w	r3, r3, #4
 8002052:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d015      	beq.n	8002088 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe ff50 	bl	8000f00 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7fe ff4c 	bl	8000f00 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e0d7      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207a:	4b4b      	ldr	r3, [pc, #300]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0ee      	beq.n	8002064 <HAL_RCC_OscConfig+0x368>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7fe ff3a 	bl	8000f00 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002090:	f7fe ff36 	bl	8000f00 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e0c1      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a6:	4b40      	ldr	r3, [pc, #256]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ee      	bne.n	8002090 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d105      	bne.n	80020c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b8:	4b3b      	ldr	r3, [pc, #236]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	4a3a      	ldr	r2, [pc, #232]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 80020be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80ad 	beq.w	8002228 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ce:	4b36      	ldr	r3, [pc, #216]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d060      	beq.n	800219c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d145      	bne.n	800216e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e2:	4b33      	ldr	r3, [pc, #204]	@ (80021b0 <HAL_RCC_OscConfig+0x4b4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe ff0a 	bl	8000f00 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe ff06 	bl	8000f00 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e093      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002102:	4b29      	ldr	r3, [pc, #164]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	019b      	lsls	r3, r3, #6
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	3b01      	subs	r3, #1
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	071b      	lsls	r3, r3, #28
 800213a:	491b      	ldr	r1, [pc, #108]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <HAL_RCC_OscConfig+0x4b4>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7fe fedb 	bl	8000f00 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7fe fed7 	bl	8000f00 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e064      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x452>
 800216c:	e05c      	b.n	8002228 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_RCC_OscConfig+0x4b4>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fec4 	bl	8000f00 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe fec0 	bl	8000f00 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e04d      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x480>
 800219a:	e045      	b.n	8002228 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e040      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40007000 	.word	0x40007000
 80021b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <HAL_RCC_OscConfig+0x538>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d030      	beq.n	8002224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d129      	bne.n	8002224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d122      	bne.n	8002224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d119      	bne.n	8002224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	3b01      	subs	r3, #1
 80021fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d10f      	bne.n	8002224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e042      	b.n	80022d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fcc4 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	@ 0x24
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800227a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f973 	bl	8002568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d175      	bne.n	80023e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_UART_Transmit+0x2c>
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e06e      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	@ 0x21
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fdf3 	bl	8000f00 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002330:	d108      	bne.n	8002344 <HAL_UART_Transmit+0x6c>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e003      	b.n	800234c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800234c:	e02e      	b.n	80023ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	@ 0x80
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f848 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e03a      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3302      	adds	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e007      	b.n	800239e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1cb      	bne.n	800234e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	@ 0x40
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f814 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fe:	e03b      	b.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d037      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002408:	f7fe fd7a 	bl	8000f00 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d302      	bcc.n	800241e <UART_WaitOnFlagUntilTimeout+0x30>
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e03a      	b.n	8002498 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b80      	cmp	r3, #128	@ 0x80
 8002434:	d020      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d01d      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b08      	cmp	r3, #8
 8002448:	d116      	bne.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f81d 	bl	80024a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2208      	movs	r2, #8
 800246a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e00f      	b.n	8002498 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4013      	ands	r3, r2
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	429a      	cmp	r2, r3
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	429a      	cmp	r2, r3
 8002494:	d0b4      	beq.n	8002400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b095      	sub	sp, #84	@ 0x54
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	330c      	adds	r3, #12
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b2:	e853 3f00 	ldrex	r3, [r3]
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	330c      	adds	r3, #12
 80024c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80024ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e5      	bne.n	80024a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	e853 3f00 	ldrex	r3, [r3]
 80024ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3314      	adds	r3, #20
 80024fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002504:	e841 2300 	strex	r3, r2, [r1]
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e5      	bne.n	80024dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	2b01      	cmp	r3, #1
 8002516:	d119      	bne.n	800254c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	e853 3f00 	ldrex	r3, [r3]
 8002526:	60bb      	str	r3, [r7, #8]
   return(result);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002538:	61ba      	str	r2, [r7, #24]
 800253a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253c:	6979      	ldr	r1, [r7, #20]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	e841 2300 	strex	r3, r2, [r1]
 8002544:	613b      	str	r3, [r7, #16]
   return(result);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e5      	bne.n	8002518 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800255a:	bf00      	nop
 800255c:	3754      	adds	r7, #84	@ 0x54
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256c:	b0c0      	sub	sp, #256	@ 0x100
 800256e:	af00      	add	r7, sp, #0
 8002570:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	ea40 0301 	orr.w	r3, r0, r1
 8002590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025c0:	f021 010c 	bic.w	r1, r1, #12
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025ce:	430b      	orrs	r3, r1
 80025d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e2:	6999      	ldr	r1, [r3, #24]
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	ea40 0301 	orr.w	r3, r0, r1
 80025ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002834 <UART_SetConfig+0x2cc>)
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d005      	beq.n	8002608 <UART_SetConfig+0xa0>
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b8d      	ldr	r3, [pc, #564]	@ (8002838 <UART_SetConfig+0x2d0>)
 8002604:	429a      	cmp	r2, r3
 8002606:	d104      	bne.n	8002612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002608:	f7ff f934 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 800260c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002610:	e003      	b.n	800261a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002612:	f7ff f91b 	bl	800184c <HAL_RCC_GetPCLK1Freq>
 8002616:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002624:	f040 810c 	bne.w	8002840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800262c:	2200      	movs	r2, #0
 800262e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002632:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800263a:	4622      	mov	r2, r4
 800263c:	462b      	mov	r3, r5
 800263e:	1891      	adds	r1, r2, r2
 8002640:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002642:	415b      	adcs	r3, r3
 8002644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800264a:	4621      	mov	r1, r4
 800264c:	eb12 0801 	adds.w	r8, r2, r1
 8002650:	4629      	mov	r1, r5
 8002652:	eb43 0901 	adc.w	r9, r3, r1
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800266a:	4690      	mov	r8, r2
 800266c:	4699      	mov	r9, r3
 800266e:	4623      	mov	r3, r4
 8002670:	eb18 0303 	adds.w	r3, r8, r3
 8002674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002678:	462b      	mov	r3, r5
 800267a:	eb49 0303 	adc.w	r3, r9, r3
 800267e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800268e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002696:	460b      	mov	r3, r1
 8002698:	18db      	adds	r3, r3, r3
 800269a:	653b      	str	r3, [r7, #80]	@ 0x50
 800269c:	4613      	mov	r3, r2
 800269e:	eb42 0303 	adc.w	r3, r2, r3
 80026a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80026a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026ac:	f7fd fe08 	bl	80002c0 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b61      	ldr	r3, [pc, #388]	@ (800283c <UART_SetConfig+0x2d4>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	011c      	lsls	r4, r3, #4
 80026be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026d0:	4642      	mov	r2, r8
 80026d2:	464b      	mov	r3, r9
 80026d4:	1891      	adds	r1, r2, r2
 80026d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026d8:	415b      	adcs	r3, r3
 80026da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026e0:	4641      	mov	r1, r8
 80026e2:	eb12 0a01 	adds.w	sl, r2, r1
 80026e6:	4649      	mov	r1, r9
 80026e8:	eb43 0b01 	adc.w	fp, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002700:	4692      	mov	sl, r2
 8002702:	469b      	mov	fp, r3
 8002704:	4643      	mov	r3, r8
 8002706:	eb1a 0303 	adds.w	r3, sl, r3
 800270a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800270e:	464b      	mov	r3, r9
 8002710:	eb4b 0303 	adc.w	r3, fp, r3
 8002714:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002724:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800272c:	460b      	mov	r3, r1
 800272e:	18db      	adds	r3, r3, r3
 8002730:	643b      	str	r3, [r7, #64]	@ 0x40
 8002732:	4613      	mov	r3, r2
 8002734:	eb42 0303 	adc.w	r3, r2, r3
 8002738:	647b      	str	r3, [r7, #68]	@ 0x44
 800273a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800273e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002742:	f7fd fdbd 	bl	80002c0 <__aeabi_uldivmod>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4611      	mov	r1, r2
 800274c:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <UART_SetConfig+0x2d4>)
 800274e:	fba3 2301 	umull	r2, r3, r3, r1
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2264      	movs	r2, #100	@ 0x64
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	1acb      	subs	r3, r1, r3
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002762:	4b36      	ldr	r3, [pc, #216]	@ (800283c <UART_SetConfig+0x2d4>)
 8002764:	fba3 2302 	umull	r2, r3, r3, r2
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002770:	441c      	add	r4, r3
 8002772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002776:	2200      	movs	r2, #0
 8002778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800277c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002784:	4642      	mov	r2, r8
 8002786:	464b      	mov	r3, r9
 8002788:	1891      	adds	r1, r2, r2
 800278a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800278c:	415b      	adcs	r3, r3
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002794:	4641      	mov	r1, r8
 8002796:	1851      	adds	r1, r2, r1
 8002798:	6339      	str	r1, [r7, #48]	@ 0x30
 800279a:	4649      	mov	r1, r9
 800279c:	414b      	adcs	r3, r1
 800279e:	637b      	str	r3, [r7, #52]	@ 0x34
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027ac:	4659      	mov	r1, fp
 80027ae:	00cb      	lsls	r3, r1, #3
 80027b0:	4651      	mov	r1, sl
 80027b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b6:	4651      	mov	r1, sl
 80027b8:	00ca      	lsls	r2, r1, #3
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	4642      	mov	r2, r8
 80027c2:	189b      	adds	r3, r3, r2
 80027c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027c8:	464b      	mov	r3, r9
 80027ca:	460a      	mov	r2, r1
 80027cc:	eb42 0303 	adc.w	r3, r2, r3
 80027d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80027e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80027e8:	460b      	mov	r3, r1
 80027ea:	18db      	adds	r3, r3, r3
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ee:	4613      	mov	r3, r2
 80027f0:	eb42 0303 	adc.w	r3, r2, r3
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027fe:	f7fd fd5f 	bl	80002c0 <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <UART_SetConfig+0x2d4>)
 8002808:	fba3 1302 	umull	r1, r3, r3, r2
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	2164      	movs	r1, #100	@ 0x64
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	3332      	adds	r3, #50	@ 0x32
 800281a:	4a08      	ldr	r2, [pc, #32]	@ (800283c <UART_SetConfig+0x2d4>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	f003 0207 	and.w	r2, r3, #7
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4422      	add	r2, r4
 800282e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002830:	e106      	b.n	8002a40 <UART_SetConfig+0x4d8>
 8002832:	bf00      	nop
 8002834:	40011000 	.word	0x40011000
 8002838:	40011400 	.word	0x40011400
 800283c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002844:	2200      	movs	r2, #0
 8002846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800284a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800284e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002852:	4642      	mov	r2, r8
 8002854:	464b      	mov	r3, r9
 8002856:	1891      	adds	r1, r2, r2
 8002858:	6239      	str	r1, [r7, #32]
 800285a:	415b      	adcs	r3, r3
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
 800285e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002862:	4641      	mov	r1, r8
 8002864:	1854      	adds	r4, r2, r1
 8002866:	4649      	mov	r1, r9
 8002868:	eb43 0501 	adc.w	r5, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	00eb      	lsls	r3, r5, #3
 8002876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287a:	00e2      	lsls	r2, r4, #3
 800287c:	4614      	mov	r4, r2
 800287e:	461d      	mov	r5, r3
 8002880:	4643      	mov	r3, r8
 8002882:	18e3      	adds	r3, r4, r3
 8002884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002888:	464b      	mov	r3, r9
 800288a:	eb45 0303 	adc.w	r3, r5, r3
 800288e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800289e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ae:	4629      	mov	r1, r5
 80028b0:	008b      	lsls	r3, r1, #2
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028b8:	4621      	mov	r1, r4
 80028ba:	008a      	lsls	r2, r1, #2
 80028bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028c0:	f7fd fcfe 	bl	80002c0 <__aeabi_uldivmod>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4b60      	ldr	r3, [pc, #384]	@ (8002a4c <UART_SetConfig+0x4e4>)
 80028ca:	fba3 2302 	umull	r2, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	011c      	lsls	r4, r3, #4
 80028d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80028e4:	4642      	mov	r2, r8
 80028e6:	464b      	mov	r3, r9
 80028e8:	1891      	adds	r1, r2, r2
 80028ea:	61b9      	str	r1, [r7, #24]
 80028ec:	415b      	adcs	r3, r3
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f4:	4641      	mov	r1, r8
 80028f6:	1851      	adds	r1, r2, r1
 80028f8:	6139      	str	r1, [r7, #16]
 80028fa:	4649      	mov	r1, r9
 80028fc:	414b      	adcs	r3, r1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800290c:	4659      	mov	r1, fp
 800290e:	00cb      	lsls	r3, r1, #3
 8002910:	4651      	mov	r1, sl
 8002912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002916:	4651      	mov	r1, sl
 8002918:	00ca      	lsls	r2, r1, #3
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	4603      	mov	r3, r0
 8002920:	4642      	mov	r2, r8
 8002922:	189b      	adds	r3, r3, r2
 8002924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002928:	464b      	mov	r3, r9
 800292a:	460a      	mov	r2, r1
 800292c:	eb42 0303 	adc.w	r3, r2, r3
 8002930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800293e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800294c:	4649      	mov	r1, r9
 800294e:	008b      	lsls	r3, r1, #2
 8002950:	4641      	mov	r1, r8
 8002952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002956:	4641      	mov	r1, r8
 8002958:	008a      	lsls	r2, r1, #2
 800295a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800295e:	f7fd fcaf 	bl	80002c0 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4611      	mov	r1, r2
 8002968:	4b38      	ldr	r3, [pc, #224]	@ (8002a4c <UART_SetConfig+0x4e4>)
 800296a:	fba3 2301 	umull	r2, r3, r3, r1
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2264      	movs	r2, #100	@ 0x64
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	1acb      	subs	r3, r1, r3
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	3332      	adds	r3, #50	@ 0x32
 800297c:	4a33      	ldr	r2, [pc, #204]	@ (8002a4c <UART_SetConfig+0x4e4>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002988:	441c      	add	r4, r3
 800298a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800298e:	2200      	movs	r2, #0
 8002990:	673b      	str	r3, [r7, #112]	@ 0x70
 8002992:	677a      	str	r2, [r7, #116]	@ 0x74
 8002994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002998:	4642      	mov	r2, r8
 800299a:	464b      	mov	r3, r9
 800299c:	1891      	adds	r1, r2, r2
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	415b      	adcs	r3, r3
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a8:	4641      	mov	r1, r8
 80029aa:	1851      	adds	r1, r2, r1
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	4649      	mov	r1, r9
 80029b0:	414b      	adcs	r3, r1
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029c0:	4659      	mov	r1, fp
 80029c2:	00cb      	lsls	r3, r1, #3
 80029c4:	4651      	mov	r1, sl
 80029c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ca:	4651      	mov	r1, sl
 80029cc:	00ca      	lsls	r2, r1, #3
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	4642      	mov	r2, r8
 80029d6:	189b      	adds	r3, r3, r2
 80029d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029da:	464b      	mov	r3, r9
 80029dc:	460a      	mov	r2, r1
 80029de:	eb42 0303 	adc.w	r3, r2, r3
 80029e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80029ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029fc:	4649      	mov	r1, r9
 80029fe:	008b      	lsls	r3, r1, #2
 8002a00:	4641      	mov	r1, r8
 8002a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a06:	4641      	mov	r1, r8
 8002a08:	008a      	lsls	r2, r1, #2
 8002a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a0e:	f7fd fc57 	bl	80002c0 <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <UART_SetConfig+0x4e4>)
 8002a18:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	2164      	movs	r1, #100	@ 0x64
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	3332      	adds	r3, #50	@ 0x32
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <UART_SetConfig+0x4e4>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4422      	add	r2, r4
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4c:	51eb851f 	.word	0x51eb851f

08002a50 <_vsniprintf_r>:
 8002a50:	b530      	push	{r4, r5, lr}
 8002a52:	4614      	mov	r4, r2
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	b09b      	sub	sp, #108	@ 0x6c
 8002a58:	4605      	mov	r5, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	da05      	bge.n	8002a6a <_vsniprintf_r+0x1a>
 8002a5e:	238b      	movs	r3, #139	@ 0x8b
 8002a60:	6003      	str	r3, [r0, #0]
 8002a62:	f04f 30ff 	mov.w	r0, #4294967295
 8002a66:	b01b      	add	sp, #108	@ 0x6c
 8002a68:	bd30      	pop	{r4, r5, pc}
 8002a6a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002a6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	9319      	str	r3, [sp, #100]	@ 0x64
 8002a78:	bf14      	ite	ne
 8002a7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002a7e:	4623      	moveq	r3, r4
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	9305      	str	r3, [sp, #20]
 8002a84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a88:	9100      	str	r1, [sp, #0]
 8002a8a:	9104      	str	r1, [sp, #16]
 8002a8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002a90:	4669      	mov	r1, sp
 8002a92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002a94:	f000 f9a0 	bl	8002dd8 <_svfiprintf_r>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	bfbc      	itt	lt
 8002a9c:	238b      	movlt	r3, #139	@ 0x8b
 8002a9e:	602b      	strlt	r3, [r5, #0]
 8002aa0:	2c00      	cmp	r4, #0
 8002aa2:	d0e0      	beq.n	8002a66 <_vsniprintf_r+0x16>
 8002aa4:	9b00      	ldr	r3, [sp, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e7dc      	b.n	8002a66 <_vsniprintf_r+0x16>

08002aac <vsniprintf>:
 8002aac:	b507      	push	{r0, r1, r2, lr}
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	460a      	mov	r2, r1
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4803      	ldr	r0, [pc, #12]	@ (8002ac4 <vsniprintf+0x18>)
 8002ab8:	6800      	ldr	r0, [r0, #0]
 8002aba:	f7ff ffc9 	bl	8002a50 <_vsniprintf_r>
 8002abe:	b003      	add	sp, #12
 8002ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ac4:	2000000c 	.word	0x2000000c

08002ac8 <memset>:
 8002ac8:	4402      	add	r2, r0
 8002aca:	4603      	mov	r3, r0
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <memset+0xa>
 8002ad0:	4770      	bx	lr
 8002ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad6:	e7f9      	b.n	8002acc <memset+0x4>

08002ad8 <__errno>:
 8002ad8:	4b01      	ldr	r3, [pc, #4]	@ (8002ae0 <__errno+0x8>)
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	2000000c 	.word	0x2000000c

08002ae4 <__libc_init_array>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8002b1c <__libc_init_array+0x38>)
 8002ae8:	4c0d      	ldr	r4, [pc, #52]	@ (8002b20 <__libc_init_array+0x3c>)
 8002aea:	1b64      	subs	r4, r4, r5
 8002aec:	10a4      	asrs	r4, r4, #2
 8002aee:	2600      	movs	r6, #0
 8002af0:	42a6      	cmp	r6, r4
 8002af2:	d109      	bne.n	8002b08 <__libc_init_array+0x24>
 8002af4:	4d0b      	ldr	r5, [pc, #44]	@ (8002b24 <__libc_init_array+0x40>)
 8002af6:	4c0c      	ldr	r4, [pc, #48]	@ (8002b28 <__libc_init_array+0x44>)
 8002af8:	f000 fc64 	bl	80033c4 <_init>
 8002afc:	1b64      	subs	r4, r4, r5
 8002afe:	10a4      	asrs	r4, r4, #2
 8002b00:	2600      	movs	r6, #0
 8002b02:	42a6      	cmp	r6, r4
 8002b04:	d105      	bne.n	8002b12 <__libc_init_array+0x2e>
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0c:	4798      	blx	r3
 8002b0e:	3601      	adds	r6, #1
 8002b10:	e7ee      	b.n	8002af0 <__libc_init_array+0xc>
 8002b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b16:	4798      	blx	r3
 8002b18:	3601      	adds	r6, #1
 8002b1a:	e7f2      	b.n	8002b02 <__libc_init_array+0x1e>
 8002b1c:	08003544 	.word	0x08003544
 8002b20:	08003544 	.word	0x08003544
 8002b24:	08003544 	.word	0x08003544
 8002b28:	08003548 	.word	0x08003548

08002b2c <__retarget_lock_acquire_recursive>:
 8002b2c:	4770      	bx	lr

08002b2e <__retarget_lock_release_recursive>:
 8002b2e:	4770      	bx	lr

08002b30 <_free_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4605      	mov	r5, r0
 8002b34:	2900      	cmp	r1, #0
 8002b36:	d041      	beq.n	8002bbc <_free_r+0x8c>
 8002b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b3c:	1f0c      	subs	r4, r1, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bfb8      	it	lt
 8002b42:	18e4      	addlt	r4, r4, r3
 8002b44:	f000 f8e0 	bl	8002d08 <__malloc_lock>
 8002b48:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <_free_r+0x90>)
 8002b4a:	6813      	ldr	r3, [r2, #0]
 8002b4c:	b933      	cbnz	r3, 8002b5c <_free_r+0x2c>
 8002b4e:	6063      	str	r3, [r4, #4]
 8002b50:	6014      	str	r4, [r2, #0]
 8002b52:	4628      	mov	r0, r5
 8002b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b58:	f000 b8dc 	b.w	8002d14 <__malloc_unlock>
 8002b5c:	42a3      	cmp	r3, r4
 8002b5e:	d908      	bls.n	8002b72 <_free_r+0x42>
 8002b60:	6820      	ldr	r0, [r4, #0]
 8002b62:	1821      	adds	r1, r4, r0
 8002b64:	428b      	cmp	r3, r1
 8002b66:	bf01      	itttt	eq
 8002b68:	6819      	ldreq	r1, [r3, #0]
 8002b6a:	685b      	ldreq	r3, [r3, #4]
 8002b6c:	1809      	addeq	r1, r1, r0
 8002b6e:	6021      	streq	r1, [r4, #0]
 8002b70:	e7ed      	b.n	8002b4e <_free_r+0x1e>
 8002b72:	461a      	mov	r2, r3
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	b10b      	cbz	r3, 8002b7c <_free_r+0x4c>
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	d9fa      	bls.n	8002b72 <_free_r+0x42>
 8002b7c:	6811      	ldr	r1, [r2, #0]
 8002b7e:	1850      	adds	r0, r2, r1
 8002b80:	42a0      	cmp	r0, r4
 8002b82:	d10b      	bne.n	8002b9c <_free_r+0x6c>
 8002b84:	6820      	ldr	r0, [r4, #0]
 8002b86:	4401      	add	r1, r0
 8002b88:	1850      	adds	r0, r2, r1
 8002b8a:	4283      	cmp	r3, r0
 8002b8c:	6011      	str	r1, [r2, #0]
 8002b8e:	d1e0      	bne.n	8002b52 <_free_r+0x22>
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	6053      	str	r3, [r2, #4]
 8002b96:	4408      	add	r0, r1
 8002b98:	6010      	str	r0, [r2, #0]
 8002b9a:	e7da      	b.n	8002b52 <_free_r+0x22>
 8002b9c:	d902      	bls.n	8002ba4 <_free_r+0x74>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	e7d6      	b.n	8002b52 <_free_r+0x22>
 8002ba4:	6820      	ldr	r0, [r4, #0]
 8002ba6:	1821      	adds	r1, r4, r0
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	bf04      	itt	eq
 8002bac:	6819      	ldreq	r1, [r3, #0]
 8002bae:	685b      	ldreq	r3, [r3, #4]
 8002bb0:	6063      	str	r3, [r4, #4]
 8002bb2:	bf04      	itt	eq
 8002bb4:	1809      	addeq	r1, r1, r0
 8002bb6:	6021      	streq	r1, [r4, #0]
 8002bb8:	6054      	str	r4, [r2, #4]
 8002bba:	e7ca      	b.n	8002b52 <_free_r+0x22>
 8002bbc:	bd38      	pop	{r3, r4, r5, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200002a8 	.word	0x200002a8

08002bc4 <sbrk_aligned>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4e0f      	ldr	r6, [pc, #60]	@ (8002c04 <sbrk_aligned+0x40>)
 8002bc8:	460c      	mov	r4, r1
 8002bca:	6831      	ldr	r1, [r6, #0]
 8002bcc:	4605      	mov	r5, r0
 8002bce:	b911      	cbnz	r1, 8002bd6 <sbrk_aligned+0x12>
 8002bd0:	f000 fba4 	bl	800331c <_sbrk_r>
 8002bd4:	6030      	str	r0, [r6, #0]
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f000 fb9f 	bl	800331c <_sbrk_r>
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	d103      	bne.n	8002bea <sbrk_aligned+0x26>
 8002be2:	f04f 34ff 	mov.w	r4, #4294967295
 8002be6:	4620      	mov	r0, r4
 8002be8:	bd70      	pop	{r4, r5, r6, pc}
 8002bea:	1cc4      	adds	r4, r0, #3
 8002bec:	f024 0403 	bic.w	r4, r4, #3
 8002bf0:	42a0      	cmp	r0, r4
 8002bf2:	d0f8      	beq.n	8002be6 <sbrk_aligned+0x22>
 8002bf4:	1a21      	subs	r1, r4, r0
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f000 fb90 	bl	800331c <_sbrk_r>
 8002bfc:	3001      	adds	r0, #1
 8002bfe:	d1f2      	bne.n	8002be6 <sbrk_aligned+0x22>
 8002c00:	e7ef      	b.n	8002be2 <sbrk_aligned+0x1e>
 8002c02:	bf00      	nop
 8002c04:	200002a4 	.word	0x200002a4

08002c08 <_malloc_r>:
 8002c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c0c:	1ccd      	adds	r5, r1, #3
 8002c0e:	f025 0503 	bic.w	r5, r5, #3
 8002c12:	3508      	adds	r5, #8
 8002c14:	2d0c      	cmp	r5, #12
 8002c16:	bf38      	it	cc
 8002c18:	250c      	movcc	r5, #12
 8002c1a:	2d00      	cmp	r5, #0
 8002c1c:	4606      	mov	r6, r0
 8002c1e:	db01      	blt.n	8002c24 <_malloc_r+0x1c>
 8002c20:	42a9      	cmp	r1, r5
 8002c22:	d904      	bls.n	8002c2e <_malloc_r+0x26>
 8002c24:	230c      	movs	r3, #12
 8002c26:	6033      	str	r3, [r6, #0]
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d04 <_malloc_r+0xfc>
 8002c32:	f000 f869 	bl	8002d08 <__malloc_lock>
 8002c36:	f8d8 3000 	ldr.w	r3, [r8]
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	bb44      	cbnz	r4, 8002c90 <_malloc_r+0x88>
 8002c3e:	4629      	mov	r1, r5
 8002c40:	4630      	mov	r0, r6
 8002c42:	f7ff ffbf 	bl	8002bc4 <sbrk_aligned>
 8002c46:	1c43      	adds	r3, r0, #1
 8002c48:	4604      	mov	r4, r0
 8002c4a:	d158      	bne.n	8002cfe <_malloc_r+0xf6>
 8002c4c:	f8d8 4000 	ldr.w	r4, [r8]
 8002c50:	4627      	mov	r7, r4
 8002c52:	2f00      	cmp	r7, #0
 8002c54:	d143      	bne.n	8002cde <_malloc_r+0xd6>
 8002c56:	2c00      	cmp	r4, #0
 8002c58:	d04b      	beq.n	8002cf2 <_malloc_r+0xea>
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	4639      	mov	r1, r7
 8002c5e:	4630      	mov	r0, r6
 8002c60:	eb04 0903 	add.w	r9, r4, r3
 8002c64:	f000 fb5a 	bl	800331c <_sbrk_r>
 8002c68:	4581      	cmp	r9, r0
 8002c6a:	d142      	bne.n	8002cf2 <_malloc_r+0xea>
 8002c6c:	6821      	ldr	r1, [r4, #0]
 8002c6e:	1a6d      	subs	r5, r5, r1
 8002c70:	4629      	mov	r1, r5
 8002c72:	4630      	mov	r0, r6
 8002c74:	f7ff ffa6 	bl	8002bc4 <sbrk_aligned>
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d03a      	beq.n	8002cf2 <_malloc_r+0xea>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	442b      	add	r3, r5
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	f8d8 3000 	ldr.w	r3, [r8]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	bb62      	cbnz	r2, 8002ce4 <_malloc_r+0xdc>
 8002c8a:	f8c8 7000 	str.w	r7, [r8]
 8002c8e:	e00f      	b.n	8002cb0 <_malloc_r+0xa8>
 8002c90:	6822      	ldr	r2, [r4, #0]
 8002c92:	1b52      	subs	r2, r2, r5
 8002c94:	d420      	bmi.n	8002cd8 <_malloc_r+0xd0>
 8002c96:	2a0b      	cmp	r2, #11
 8002c98:	d917      	bls.n	8002cca <_malloc_r+0xc2>
 8002c9a:	1961      	adds	r1, r4, r5
 8002c9c:	42a3      	cmp	r3, r4
 8002c9e:	6025      	str	r5, [r4, #0]
 8002ca0:	bf18      	it	ne
 8002ca2:	6059      	strne	r1, [r3, #4]
 8002ca4:	6863      	ldr	r3, [r4, #4]
 8002ca6:	bf08      	it	eq
 8002ca8:	f8c8 1000 	streq.w	r1, [r8]
 8002cac:	5162      	str	r2, [r4, r5]
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f000 f82f 	bl	8002d14 <__malloc_unlock>
 8002cb6:	f104 000b 	add.w	r0, r4, #11
 8002cba:	1d23      	adds	r3, r4, #4
 8002cbc:	f020 0007 	bic.w	r0, r0, #7
 8002cc0:	1ac2      	subs	r2, r0, r3
 8002cc2:	bf1c      	itt	ne
 8002cc4:	1a1b      	subne	r3, r3, r0
 8002cc6:	50a3      	strne	r3, [r4, r2]
 8002cc8:	e7af      	b.n	8002c2a <_malloc_r+0x22>
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	42a3      	cmp	r3, r4
 8002cce:	bf0c      	ite	eq
 8002cd0:	f8c8 2000 	streq.w	r2, [r8]
 8002cd4:	605a      	strne	r2, [r3, #4]
 8002cd6:	e7eb      	b.n	8002cb0 <_malloc_r+0xa8>
 8002cd8:	4623      	mov	r3, r4
 8002cda:	6864      	ldr	r4, [r4, #4]
 8002cdc:	e7ae      	b.n	8002c3c <_malloc_r+0x34>
 8002cde:	463c      	mov	r4, r7
 8002ce0:	687f      	ldr	r7, [r7, #4]
 8002ce2:	e7b6      	b.n	8002c52 <_malloc_r+0x4a>
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	d1fb      	bne.n	8002ce4 <_malloc_r+0xdc>
 8002cec:	2300      	movs	r3, #0
 8002cee:	6053      	str	r3, [r2, #4]
 8002cf0:	e7de      	b.n	8002cb0 <_malloc_r+0xa8>
 8002cf2:	230c      	movs	r3, #12
 8002cf4:	6033      	str	r3, [r6, #0]
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f000 f80c 	bl	8002d14 <__malloc_unlock>
 8002cfc:	e794      	b.n	8002c28 <_malloc_r+0x20>
 8002cfe:	6005      	str	r5, [r0, #0]
 8002d00:	e7d6      	b.n	8002cb0 <_malloc_r+0xa8>
 8002d02:	bf00      	nop
 8002d04:	200002a8 	.word	0x200002a8

08002d08 <__malloc_lock>:
 8002d08:	4801      	ldr	r0, [pc, #4]	@ (8002d10 <__malloc_lock+0x8>)
 8002d0a:	f7ff bf0f 	b.w	8002b2c <__retarget_lock_acquire_recursive>
 8002d0e:	bf00      	nop
 8002d10:	200002a0 	.word	0x200002a0

08002d14 <__malloc_unlock>:
 8002d14:	4801      	ldr	r0, [pc, #4]	@ (8002d1c <__malloc_unlock+0x8>)
 8002d16:	f7ff bf0a 	b.w	8002b2e <__retarget_lock_release_recursive>
 8002d1a:	bf00      	nop
 8002d1c:	200002a0 	.word	0x200002a0

08002d20 <__ssputs_r>:
 8002d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d24:	688e      	ldr	r6, [r1, #8]
 8002d26:	461f      	mov	r7, r3
 8002d28:	42be      	cmp	r6, r7
 8002d2a:	680b      	ldr	r3, [r1, #0]
 8002d2c:	4682      	mov	sl, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	4690      	mov	r8, r2
 8002d32:	d82d      	bhi.n	8002d90 <__ssputs_r+0x70>
 8002d34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002d3c:	d026      	beq.n	8002d8c <__ssputs_r+0x6c>
 8002d3e:	6965      	ldr	r5, [r4, #20]
 8002d40:	6909      	ldr	r1, [r1, #16]
 8002d42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d46:	eba3 0901 	sub.w	r9, r3, r1
 8002d4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d4e:	1c7b      	adds	r3, r7, #1
 8002d50:	444b      	add	r3, r9
 8002d52:	106d      	asrs	r5, r5, #1
 8002d54:	429d      	cmp	r5, r3
 8002d56:	bf38      	it	cc
 8002d58:	461d      	movcc	r5, r3
 8002d5a:	0553      	lsls	r3, r2, #21
 8002d5c:	d527      	bpl.n	8002dae <__ssputs_r+0x8e>
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f7ff ff52 	bl	8002c08 <_malloc_r>
 8002d64:	4606      	mov	r6, r0
 8002d66:	b360      	cbz	r0, 8002dc2 <__ssputs_r+0xa2>
 8002d68:	6921      	ldr	r1, [r4, #16]
 8002d6a:	464a      	mov	r2, r9
 8002d6c:	f000 fae6 	bl	800333c <memcpy>
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d7a:	81a3      	strh	r3, [r4, #12]
 8002d7c:	6126      	str	r6, [r4, #16]
 8002d7e:	6165      	str	r5, [r4, #20]
 8002d80:	444e      	add	r6, r9
 8002d82:	eba5 0509 	sub.w	r5, r5, r9
 8002d86:	6026      	str	r6, [r4, #0]
 8002d88:	60a5      	str	r5, [r4, #8]
 8002d8a:	463e      	mov	r6, r7
 8002d8c:	42be      	cmp	r6, r7
 8002d8e:	d900      	bls.n	8002d92 <__ssputs_r+0x72>
 8002d90:	463e      	mov	r6, r7
 8002d92:	6820      	ldr	r0, [r4, #0]
 8002d94:	4632      	mov	r2, r6
 8002d96:	4641      	mov	r1, r8
 8002d98:	f000 faa6 	bl	80032e8 <memmove>
 8002d9c:	68a3      	ldr	r3, [r4, #8]
 8002d9e:	1b9b      	subs	r3, r3, r6
 8002da0:	60a3      	str	r3, [r4, #8]
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	4433      	add	r3, r6
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	2000      	movs	r0, #0
 8002daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dae:	462a      	mov	r2, r5
 8002db0:	f000 fad2 	bl	8003358 <_realloc_r>
 8002db4:	4606      	mov	r6, r0
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d1e0      	bne.n	8002d7c <__ssputs_r+0x5c>
 8002dba:	6921      	ldr	r1, [r4, #16]
 8002dbc:	4650      	mov	r0, sl
 8002dbe:	f7ff feb7 	bl	8002b30 <_free_r>
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	f8ca 3000 	str.w	r3, [sl]
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dce:	81a3      	strh	r3, [r4, #12]
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	e7e9      	b.n	8002daa <__ssputs_r+0x8a>
	...

08002dd8 <_svfiprintf_r>:
 8002dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ddc:	4698      	mov	r8, r3
 8002dde:	898b      	ldrh	r3, [r1, #12]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	b09d      	sub	sp, #116	@ 0x74
 8002de4:	4607      	mov	r7, r0
 8002de6:	460d      	mov	r5, r1
 8002de8:	4614      	mov	r4, r2
 8002dea:	d510      	bpl.n	8002e0e <_svfiprintf_r+0x36>
 8002dec:	690b      	ldr	r3, [r1, #16]
 8002dee:	b973      	cbnz	r3, 8002e0e <_svfiprintf_r+0x36>
 8002df0:	2140      	movs	r1, #64	@ 0x40
 8002df2:	f7ff ff09 	bl	8002c08 <_malloc_r>
 8002df6:	6028      	str	r0, [r5, #0]
 8002df8:	6128      	str	r0, [r5, #16]
 8002dfa:	b930      	cbnz	r0, 8002e0a <_svfiprintf_r+0x32>
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	b01d      	add	sp, #116	@ 0x74
 8002e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0a:	2340      	movs	r3, #64	@ 0x40
 8002e0c:	616b      	str	r3, [r5, #20]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e12:	2320      	movs	r3, #32
 8002e14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e18:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e1c:	2330      	movs	r3, #48	@ 0x30
 8002e1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002fbc <_svfiprintf_r+0x1e4>
 8002e22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e26:	f04f 0901 	mov.w	r9, #1
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	469a      	mov	sl, r3
 8002e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e32:	b10a      	cbz	r2, 8002e38 <_svfiprintf_r+0x60>
 8002e34:	2a25      	cmp	r2, #37	@ 0x25
 8002e36:	d1f9      	bne.n	8002e2c <_svfiprintf_r+0x54>
 8002e38:	ebba 0b04 	subs.w	fp, sl, r4
 8002e3c:	d00b      	beq.n	8002e56 <_svfiprintf_r+0x7e>
 8002e3e:	465b      	mov	r3, fp
 8002e40:	4622      	mov	r2, r4
 8002e42:	4629      	mov	r1, r5
 8002e44:	4638      	mov	r0, r7
 8002e46:	f7ff ff6b 	bl	8002d20 <__ssputs_r>
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	f000 80a7 	beq.w	8002f9e <_svfiprintf_r+0x1c6>
 8002e50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e52:	445a      	add	r2, fp
 8002e54:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e56:	f89a 3000 	ldrb.w	r3, [sl]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 809f 	beq.w	8002f9e <_svfiprintf_r+0x1c6>
 8002e60:	2300      	movs	r3, #0
 8002e62:	f04f 32ff 	mov.w	r2, #4294967295
 8002e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e6a:	f10a 0a01 	add.w	sl, sl, #1
 8002e6e:	9304      	str	r3, [sp, #16]
 8002e70:	9307      	str	r3, [sp, #28]
 8002e72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e76:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e78:	4654      	mov	r4, sl
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e80:	484e      	ldr	r0, [pc, #312]	@ (8002fbc <_svfiprintf_r+0x1e4>)
 8002e82:	f7fd f9cd 	bl	8000220 <memchr>
 8002e86:	9a04      	ldr	r2, [sp, #16]
 8002e88:	b9d8      	cbnz	r0, 8002ec2 <_svfiprintf_r+0xea>
 8002e8a:	06d0      	lsls	r0, r2, #27
 8002e8c:	bf44      	itt	mi
 8002e8e:	2320      	movmi	r3, #32
 8002e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e94:	0711      	lsls	r1, r2, #28
 8002e96:	bf44      	itt	mi
 8002e98:	232b      	movmi	r3, #43	@ 0x2b
 8002e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ea4:	d015      	beq.n	8002ed2 <_svfiprintf_r+0xfa>
 8002ea6:	9a07      	ldr	r2, [sp, #28]
 8002ea8:	4654      	mov	r4, sl
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f04f 0c0a 	mov.w	ip, #10
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eb6:	3b30      	subs	r3, #48	@ 0x30
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	d94b      	bls.n	8002f54 <_svfiprintf_r+0x17c>
 8002ebc:	b1b0      	cbz	r0, 8002eec <_svfiprintf_r+0x114>
 8002ebe:	9207      	str	r2, [sp, #28]
 8002ec0:	e014      	b.n	8002eec <_svfiprintf_r+0x114>
 8002ec2:	eba0 0308 	sub.w	r3, r0, r8
 8002ec6:	fa09 f303 	lsl.w	r3, r9, r3
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	9304      	str	r3, [sp, #16]
 8002ece:	46a2      	mov	sl, r4
 8002ed0:	e7d2      	b.n	8002e78 <_svfiprintf_r+0xa0>
 8002ed2:	9b03      	ldr	r3, [sp, #12]
 8002ed4:	1d19      	adds	r1, r3, #4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	9103      	str	r1, [sp, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bfbb      	ittet	lt
 8002ede:	425b      	neglt	r3, r3
 8002ee0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ee4:	9307      	strge	r3, [sp, #28]
 8002ee6:	9307      	strlt	r3, [sp, #28]
 8002ee8:	bfb8      	it	lt
 8002eea:	9204      	strlt	r2, [sp, #16]
 8002eec:	7823      	ldrb	r3, [r4, #0]
 8002eee:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ef0:	d10a      	bne.n	8002f08 <_svfiprintf_r+0x130>
 8002ef2:	7863      	ldrb	r3, [r4, #1]
 8002ef4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ef6:	d132      	bne.n	8002f5e <_svfiprintf_r+0x186>
 8002ef8:	9b03      	ldr	r3, [sp, #12]
 8002efa:	1d1a      	adds	r2, r3, #4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	9203      	str	r2, [sp, #12]
 8002f00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f04:	3402      	adds	r4, #2
 8002f06:	9305      	str	r3, [sp, #20]
 8002f08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002fcc <_svfiprintf_r+0x1f4>
 8002f0c:	7821      	ldrb	r1, [r4, #0]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	4650      	mov	r0, sl
 8002f12:	f7fd f985 	bl	8000220 <memchr>
 8002f16:	b138      	cbz	r0, 8002f28 <_svfiprintf_r+0x150>
 8002f18:	9b04      	ldr	r3, [sp, #16]
 8002f1a:	eba0 000a 	sub.w	r0, r0, sl
 8002f1e:	2240      	movs	r2, #64	@ 0x40
 8002f20:	4082      	lsls	r2, r0
 8002f22:	4313      	orrs	r3, r2
 8002f24:	3401      	adds	r4, #1
 8002f26:	9304      	str	r3, [sp, #16]
 8002f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f2c:	4824      	ldr	r0, [pc, #144]	@ (8002fc0 <_svfiprintf_r+0x1e8>)
 8002f2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f32:	2206      	movs	r2, #6
 8002f34:	f7fd f974 	bl	8000220 <memchr>
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d036      	beq.n	8002faa <_svfiprintf_r+0x1d2>
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <_svfiprintf_r+0x1ec>)
 8002f3e:	bb1b      	cbnz	r3, 8002f88 <_svfiprintf_r+0x1b0>
 8002f40:	9b03      	ldr	r3, [sp, #12]
 8002f42:	3307      	adds	r3, #7
 8002f44:	f023 0307 	bic.w	r3, r3, #7
 8002f48:	3308      	adds	r3, #8
 8002f4a:	9303      	str	r3, [sp, #12]
 8002f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f4e:	4433      	add	r3, r6
 8002f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f52:	e76a      	b.n	8002e2a <_svfiprintf_r+0x52>
 8002f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f58:	460c      	mov	r4, r1
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	e7a8      	b.n	8002eb0 <_svfiprintf_r+0xd8>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	3401      	adds	r4, #1
 8002f62:	9305      	str	r3, [sp, #20]
 8002f64:	4619      	mov	r1, r3
 8002f66:	f04f 0c0a 	mov.w	ip, #10
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f70:	3a30      	subs	r2, #48	@ 0x30
 8002f72:	2a09      	cmp	r2, #9
 8002f74:	d903      	bls.n	8002f7e <_svfiprintf_r+0x1a6>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0c6      	beq.n	8002f08 <_svfiprintf_r+0x130>
 8002f7a:	9105      	str	r1, [sp, #20]
 8002f7c:	e7c4      	b.n	8002f08 <_svfiprintf_r+0x130>
 8002f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f82:	4604      	mov	r4, r0
 8002f84:	2301      	movs	r3, #1
 8002f86:	e7f0      	b.n	8002f6a <_svfiprintf_r+0x192>
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	462a      	mov	r2, r5
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <_svfiprintf_r+0x1f0>)
 8002f90:	a904      	add	r1, sp, #16
 8002f92:	4638      	mov	r0, r7
 8002f94:	f3af 8000 	nop.w
 8002f98:	1c42      	adds	r2, r0, #1
 8002f9a:	4606      	mov	r6, r0
 8002f9c:	d1d6      	bne.n	8002f4c <_svfiprintf_r+0x174>
 8002f9e:	89ab      	ldrh	r3, [r5, #12]
 8002fa0:	065b      	lsls	r3, r3, #25
 8002fa2:	f53f af2d 	bmi.w	8002e00 <_svfiprintf_r+0x28>
 8002fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002fa8:	e72c      	b.n	8002e04 <_svfiprintf_r+0x2c>
 8002faa:	ab03      	add	r3, sp, #12
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	462a      	mov	r2, r5
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <_svfiprintf_r+0x1f0>)
 8002fb2:	a904      	add	r1, sp, #16
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	f000 f879 	bl	80030ac <_printf_i>
 8002fba:	e7ed      	b.n	8002f98 <_svfiprintf_r+0x1c0>
 8002fbc:	08003508 	.word	0x08003508
 8002fc0:	08003512 	.word	0x08003512
 8002fc4:	00000000 	.word	0x00000000
 8002fc8:	08002d21 	.word	0x08002d21
 8002fcc:	0800350e 	.word	0x0800350e

08002fd0 <_printf_common>:
 8002fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd4:	4616      	mov	r6, r2
 8002fd6:	4698      	mov	r8, r3
 8002fd8:	688a      	ldr	r2, [r1, #8]
 8002fda:	690b      	ldr	r3, [r1, #16]
 8002fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bfb8      	it	lt
 8002fe4:	4613      	movlt	r3, r2
 8002fe6:	6033      	str	r3, [r6, #0]
 8002fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fec:	4607      	mov	r7, r0
 8002fee:	460c      	mov	r4, r1
 8002ff0:	b10a      	cbz	r2, 8002ff6 <_printf_common+0x26>
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	6033      	str	r3, [r6, #0]
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	0699      	lsls	r1, r3, #26
 8002ffa:	bf42      	ittt	mi
 8002ffc:	6833      	ldrmi	r3, [r6, #0]
 8002ffe:	3302      	addmi	r3, #2
 8003000:	6033      	strmi	r3, [r6, #0]
 8003002:	6825      	ldr	r5, [r4, #0]
 8003004:	f015 0506 	ands.w	r5, r5, #6
 8003008:	d106      	bne.n	8003018 <_printf_common+0x48>
 800300a:	f104 0a19 	add.w	sl, r4, #25
 800300e:	68e3      	ldr	r3, [r4, #12]
 8003010:	6832      	ldr	r2, [r6, #0]
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	42ab      	cmp	r3, r5
 8003016:	dc26      	bgt.n	8003066 <_printf_common+0x96>
 8003018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	3b00      	subs	r3, #0
 8003020:	bf18      	it	ne
 8003022:	2301      	movne	r3, #1
 8003024:	0692      	lsls	r2, r2, #26
 8003026:	d42b      	bmi.n	8003080 <_printf_common+0xb0>
 8003028:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800302c:	4641      	mov	r1, r8
 800302e:	4638      	mov	r0, r7
 8003030:	47c8      	blx	r9
 8003032:	3001      	adds	r0, #1
 8003034:	d01e      	beq.n	8003074 <_printf_common+0xa4>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	6922      	ldr	r2, [r4, #16]
 800303a:	f003 0306 	and.w	r3, r3, #6
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf02      	ittt	eq
 8003042:	68e5      	ldreq	r5, [r4, #12]
 8003044:	6833      	ldreq	r3, [r6, #0]
 8003046:	1aed      	subeq	r5, r5, r3
 8003048:	68a3      	ldr	r3, [r4, #8]
 800304a:	bf0c      	ite	eq
 800304c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003050:	2500      	movne	r5, #0
 8003052:	4293      	cmp	r3, r2
 8003054:	bfc4      	itt	gt
 8003056:	1a9b      	subgt	r3, r3, r2
 8003058:	18ed      	addgt	r5, r5, r3
 800305a:	2600      	movs	r6, #0
 800305c:	341a      	adds	r4, #26
 800305e:	42b5      	cmp	r5, r6
 8003060:	d11a      	bne.n	8003098 <_printf_common+0xc8>
 8003062:	2000      	movs	r0, #0
 8003064:	e008      	b.n	8003078 <_printf_common+0xa8>
 8003066:	2301      	movs	r3, #1
 8003068:	4652      	mov	r2, sl
 800306a:	4641      	mov	r1, r8
 800306c:	4638      	mov	r0, r7
 800306e:	47c8      	blx	r9
 8003070:	3001      	adds	r0, #1
 8003072:	d103      	bne.n	800307c <_printf_common+0xac>
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307c:	3501      	adds	r5, #1
 800307e:	e7c6      	b.n	800300e <_printf_common+0x3e>
 8003080:	18e1      	adds	r1, r4, r3
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	2030      	movs	r0, #48	@ 0x30
 8003086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800308a:	4422      	add	r2, r4
 800308c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003094:	3302      	adds	r3, #2
 8003096:	e7c7      	b.n	8003028 <_printf_common+0x58>
 8003098:	2301      	movs	r3, #1
 800309a:	4622      	mov	r2, r4
 800309c:	4641      	mov	r1, r8
 800309e:	4638      	mov	r0, r7
 80030a0:	47c8      	blx	r9
 80030a2:	3001      	adds	r0, #1
 80030a4:	d0e6      	beq.n	8003074 <_printf_common+0xa4>
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7d9      	b.n	800305e <_printf_common+0x8e>
	...

080030ac <_printf_i>:
 80030ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030b0:	7e0f      	ldrb	r7, [r1, #24]
 80030b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030b4:	2f78      	cmp	r7, #120	@ 0x78
 80030b6:	4691      	mov	r9, r2
 80030b8:	4680      	mov	r8, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	469a      	mov	sl, r3
 80030be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030c2:	d807      	bhi.n	80030d4 <_printf_i+0x28>
 80030c4:	2f62      	cmp	r7, #98	@ 0x62
 80030c6:	d80a      	bhi.n	80030de <_printf_i+0x32>
 80030c8:	2f00      	cmp	r7, #0
 80030ca:	f000 80d1 	beq.w	8003270 <_printf_i+0x1c4>
 80030ce:	2f58      	cmp	r7, #88	@ 0x58
 80030d0:	f000 80b8 	beq.w	8003244 <_printf_i+0x198>
 80030d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030dc:	e03a      	b.n	8003154 <_printf_i+0xa8>
 80030de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030e2:	2b15      	cmp	r3, #21
 80030e4:	d8f6      	bhi.n	80030d4 <_printf_i+0x28>
 80030e6:	a101      	add	r1, pc, #4	@ (adr r1, 80030ec <_printf_i+0x40>)
 80030e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030ec:	08003145 	.word	0x08003145
 80030f0:	08003159 	.word	0x08003159
 80030f4:	080030d5 	.word	0x080030d5
 80030f8:	080030d5 	.word	0x080030d5
 80030fc:	080030d5 	.word	0x080030d5
 8003100:	080030d5 	.word	0x080030d5
 8003104:	08003159 	.word	0x08003159
 8003108:	080030d5 	.word	0x080030d5
 800310c:	080030d5 	.word	0x080030d5
 8003110:	080030d5 	.word	0x080030d5
 8003114:	080030d5 	.word	0x080030d5
 8003118:	08003257 	.word	0x08003257
 800311c:	08003183 	.word	0x08003183
 8003120:	08003211 	.word	0x08003211
 8003124:	080030d5 	.word	0x080030d5
 8003128:	080030d5 	.word	0x080030d5
 800312c:	08003279 	.word	0x08003279
 8003130:	080030d5 	.word	0x080030d5
 8003134:	08003183 	.word	0x08003183
 8003138:	080030d5 	.word	0x080030d5
 800313c:	080030d5 	.word	0x080030d5
 8003140:	08003219 	.word	0x08003219
 8003144:	6833      	ldr	r3, [r6, #0]
 8003146:	1d1a      	adds	r2, r3, #4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6032      	str	r2, [r6, #0]
 800314c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003154:	2301      	movs	r3, #1
 8003156:	e09c      	b.n	8003292 <_printf_i+0x1e6>
 8003158:	6833      	ldr	r3, [r6, #0]
 800315a:	6820      	ldr	r0, [r4, #0]
 800315c:	1d19      	adds	r1, r3, #4
 800315e:	6031      	str	r1, [r6, #0]
 8003160:	0606      	lsls	r6, r0, #24
 8003162:	d501      	bpl.n	8003168 <_printf_i+0xbc>
 8003164:	681d      	ldr	r5, [r3, #0]
 8003166:	e003      	b.n	8003170 <_printf_i+0xc4>
 8003168:	0645      	lsls	r5, r0, #25
 800316a:	d5fb      	bpl.n	8003164 <_printf_i+0xb8>
 800316c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003170:	2d00      	cmp	r5, #0
 8003172:	da03      	bge.n	800317c <_printf_i+0xd0>
 8003174:	232d      	movs	r3, #45	@ 0x2d
 8003176:	426d      	negs	r5, r5
 8003178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800317c:	4858      	ldr	r0, [pc, #352]	@ (80032e0 <_printf_i+0x234>)
 800317e:	230a      	movs	r3, #10
 8003180:	e011      	b.n	80031a6 <_printf_i+0xfa>
 8003182:	6821      	ldr	r1, [r4, #0]
 8003184:	6833      	ldr	r3, [r6, #0]
 8003186:	0608      	lsls	r0, r1, #24
 8003188:	f853 5b04 	ldr.w	r5, [r3], #4
 800318c:	d402      	bmi.n	8003194 <_printf_i+0xe8>
 800318e:	0649      	lsls	r1, r1, #25
 8003190:	bf48      	it	mi
 8003192:	b2ad      	uxthmi	r5, r5
 8003194:	2f6f      	cmp	r7, #111	@ 0x6f
 8003196:	4852      	ldr	r0, [pc, #328]	@ (80032e0 <_printf_i+0x234>)
 8003198:	6033      	str	r3, [r6, #0]
 800319a:	bf14      	ite	ne
 800319c:	230a      	movne	r3, #10
 800319e:	2308      	moveq	r3, #8
 80031a0:	2100      	movs	r1, #0
 80031a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031a6:	6866      	ldr	r6, [r4, #4]
 80031a8:	60a6      	str	r6, [r4, #8]
 80031aa:	2e00      	cmp	r6, #0
 80031ac:	db05      	blt.n	80031ba <_printf_i+0x10e>
 80031ae:	6821      	ldr	r1, [r4, #0]
 80031b0:	432e      	orrs	r6, r5
 80031b2:	f021 0104 	bic.w	r1, r1, #4
 80031b6:	6021      	str	r1, [r4, #0]
 80031b8:	d04b      	beq.n	8003252 <_printf_i+0x1a6>
 80031ba:	4616      	mov	r6, r2
 80031bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80031c0:	fb03 5711 	mls	r7, r3, r1, r5
 80031c4:	5dc7      	ldrb	r7, [r0, r7]
 80031c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031ca:	462f      	mov	r7, r5
 80031cc:	42bb      	cmp	r3, r7
 80031ce:	460d      	mov	r5, r1
 80031d0:	d9f4      	bls.n	80031bc <_printf_i+0x110>
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d10b      	bne.n	80031ee <_printf_i+0x142>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	07df      	lsls	r7, r3, #31
 80031da:	d508      	bpl.n	80031ee <_printf_i+0x142>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	6861      	ldr	r1, [r4, #4]
 80031e0:	4299      	cmp	r1, r3
 80031e2:	bfde      	ittt	le
 80031e4:	2330      	movle	r3, #48	@ 0x30
 80031e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031ee:	1b92      	subs	r2, r2, r6
 80031f0:	6122      	str	r2, [r4, #16]
 80031f2:	f8cd a000 	str.w	sl, [sp]
 80031f6:	464b      	mov	r3, r9
 80031f8:	aa03      	add	r2, sp, #12
 80031fa:	4621      	mov	r1, r4
 80031fc:	4640      	mov	r0, r8
 80031fe:	f7ff fee7 	bl	8002fd0 <_printf_common>
 8003202:	3001      	adds	r0, #1
 8003204:	d14a      	bne.n	800329c <_printf_i+0x1f0>
 8003206:	f04f 30ff 	mov.w	r0, #4294967295
 800320a:	b004      	add	sp, #16
 800320c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	f043 0320 	orr.w	r3, r3, #32
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	4832      	ldr	r0, [pc, #200]	@ (80032e4 <_printf_i+0x238>)
 800321a:	2778      	movs	r7, #120	@ 0x78
 800321c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	6831      	ldr	r1, [r6, #0]
 8003224:	061f      	lsls	r7, r3, #24
 8003226:	f851 5b04 	ldr.w	r5, [r1], #4
 800322a:	d402      	bmi.n	8003232 <_printf_i+0x186>
 800322c:	065f      	lsls	r7, r3, #25
 800322e:	bf48      	it	mi
 8003230:	b2ad      	uxthmi	r5, r5
 8003232:	6031      	str	r1, [r6, #0]
 8003234:	07d9      	lsls	r1, r3, #31
 8003236:	bf44      	itt	mi
 8003238:	f043 0320 	orrmi.w	r3, r3, #32
 800323c:	6023      	strmi	r3, [r4, #0]
 800323e:	b11d      	cbz	r5, 8003248 <_printf_i+0x19c>
 8003240:	2310      	movs	r3, #16
 8003242:	e7ad      	b.n	80031a0 <_printf_i+0xf4>
 8003244:	4826      	ldr	r0, [pc, #152]	@ (80032e0 <_printf_i+0x234>)
 8003246:	e7e9      	b.n	800321c <_printf_i+0x170>
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	f023 0320 	bic.w	r3, r3, #32
 800324e:	6023      	str	r3, [r4, #0]
 8003250:	e7f6      	b.n	8003240 <_printf_i+0x194>
 8003252:	4616      	mov	r6, r2
 8003254:	e7bd      	b.n	80031d2 <_printf_i+0x126>
 8003256:	6833      	ldr	r3, [r6, #0]
 8003258:	6825      	ldr	r5, [r4, #0]
 800325a:	6961      	ldr	r1, [r4, #20]
 800325c:	1d18      	adds	r0, r3, #4
 800325e:	6030      	str	r0, [r6, #0]
 8003260:	062e      	lsls	r6, r5, #24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	d501      	bpl.n	800326a <_printf_i+0x1be>
 8003266:	6019      	str	r1, [r3, #0]
 8003268:	e002      	b.n	8003270 <_printf_i+0x1c4>
 800326a:	0668      	lsls	r0, r5, #25
 800326c:	d5fb      	bpl.n	8003266 <_printf_i+0x1ba>
 800326e:	8019      	strh	r1, [r3, #0]
 8003270:	2300      	movs	r3, #0
 8003272:	6123      	str	r3, [r4, #16]
 8003274:	4616      	mov	r6, r2
 8003276:	e7bc      	b.n	80031f2 <_printf_i+0x146>
 8003278:	6833      	ldr	r3, [r6, #0]
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	6032      	str	r2, [r6, #0]
 800327e:	681e      	ldr	r6, [r3, #0]
 8003280:	6862      	ldr	r2, [r4, #4]
 8003282:	2100      	movs	r1, #0
 8003284:	4630      	mov	r0, r6
 8003286:	f7fc ffcb 	bl	8000220 <memchr>
 800328a:	b108      	cbz	r0, 8003290 <_printf_i+0x1e4>
 800328c:	1b80      	subs	r0, r0, r6
 800328e:	6060      	str	r0, [r4, #4]
 8003290:	6863      	ldr	r3, [r4, #4]
 8003292:	6123      	str	r3, [r4, #16]
 8003294:	2300      	movs	r3, #0
 8003296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800329a:	e7aa      	b.n	80031f2 <_printf_i+0x146>
 800329c:	6923      	ldr	r3, [r4, #16]
 800329e:	4632      	mov	r2, r6
 80032a0:	4649      	mov	r1, r9
 80032a2:	4640      	mov	r0, r8
 80032a4:	47d0      	blx	sl
 80032a6:	3001      	adds	r0, #1
 80032a8:	d0ad      	beq.n	8003206 <_printf_i+0x15a>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	079b      	lsls	r3, r3, #30
 80032ae:	d413      	bmi.n	80032d8 <_printf_i+0x22c>
 80032b0:	68e0      	ldr	r0, [r4, #12]
 80032b2:	9b03      	ldr	r3, [sp, #12]
 80032b4:	4298      	cmp	r0, r3
 80032b6:	bfb8      	it	lt
 80032b8:	4618      	movlt	r0, r3
 80032ba:	e7a6      	b.n	800320a <_printf_i+0x15e>
 80032bc:	2301      	movs	r3, #1
 80032be:	4632      	mov	r2, r6
 80032c0:	4649      	mov	r1, r9
 80032c2:	4640      	mov	r0, r8
 80032c4:	47d0      	blx	sl
 80032c6:	3001      	adds	r0, #1
 80032c8:	d09d      	beq.n	8003206 <_printf_i+0x15a>
 80032ca:	3501      	adds	r5, #1
 80032cc:	68e3      	ldr	r3, [r4, #12]
 80032ce:	9903      	ldr	r1, [sp, #12]
 80032d0:	1a5b      	subs	r3, r3, r1
 80032d2:	42ab      	cmp	r3, r5
 80032d4:	dcf2      	bgt.n	80032bc <_printf_i+0x210>
 80032d6:	e7eb      	b.n	80032b0 <_printf_i+0x204>
 80032d8:	2500      	movs	r5, #0
 80032da:	f104 0619 	add.w	r6, r4, #25
 80032de:	e7f5      	b.n	80032cc <_printf_i+0x220>
 80032e0:	08003519 	.word	0x08003519
 80032e4:	0800352a 	.word	0x0800352a

080032e8 <memmove>:
 80032e8:	4288      	cmp	r0, r1
 80032ea:	b510      	push	{r4, lr}
 80032ec:	eb01 0402 	add.w	r4, r1, r2
 80032f0:	d902      	bls.n	80032f8 <memmove+0x10>
 80032f2:	4284      	cmp	r4, r0
 80032f4:	4623      	mov	r3, r4
 80032f6:	d807      	bhi.n	8003308 <memmove+0x20>
 80032f8:	1e43      	subs	r3, r0, #1
 80032fa:	42a1      	cmp	r1, r4
 80032fc:	d008      	beq.n	8003310 <memmove+0x28>
 80032fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003306:	e7f8      	b.n	80032fa <memmove+0x12>
 8003308:	4402      	add	r2, r0
 800330a:	4601      	mov	r1, r0
 800330c:	428a      	cmp	r2, r1
 800330e:	d100      	bne.n	8003312 <memmove+0x2a>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800331a:	e7f7      	b.n	800330c <memmove+0x24>

0800331c <_sbrk_r>:
 800331c:	b538      	push	{r3, r4, r5, lr}
 800331e:	4d06      	ldr	r5, [pc, #24]	@ (8003338 <_sbrk_r+0x1c>)
 8003320:	2300      	movs	r3, #0
 8003322:	4604      	mov	r4, r0
 8003324:	4608      	mov	r0, r1
 8003326:	602b      	str	r3, [r5, #0]
 8003328:	f7fd fd0e 	bl	8000d48 <_sbrk>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_sbrk_r+0x1a>
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	b103      	cbz	r3, 8003336 <_sbrk_r+0x1a>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	2000029c 	.word	0x2000029c

0800333c <memcpy>:
 800333c:	440a      	add	r2, r1
 800333e:	4291      	cmp	r1, r2
 8003340:	f100 33ff 	add.w	r3, r0, #4294967295
 8003344:	d100      	bne.n	8003348 <memcpy+0xc>
 8003346:	4770      	bx	lr
 8003348:	b510      	push	{r4, lr}
 800334a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800334e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003352:	4291      	cmp	r1, r2
 8003354:	d1f9      	bne.n	800334a <memcpy+0xe>
 8003356:	bd10      	pop	{r4, pc}

08003358 <_realloc_r>:
 8003358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800335c:	4607      	mov	r7, r0
 800335e:	4614      	mov	r4, r2
 8003360:	460d      	mov	r5, r1
 8003362:	b921      	cbnz	r1, 800336e <_realloc_r+0x16>
 8003364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003368:	4611      	mov	r1, r2
 800336a:	f7ff bc4d 	b.w	8002c08 <_malloc_r>
 800336e:	b92a      	cbnz	r2, 800337c <_realloc_r+0x24>
 8003370:	f7ff fbde 	bl	8002b30 <_free_r>
 8003374:	4625      	mov	r5, r4
 8003376:	4628      	mov	r0, r5
 8003378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800337c:	f000 f81a 	bl	80033b4 <_malloc_usable_size_r>
 8003380:	4284      	cmp	r4, r0
 8003382:	4606      	mov	r6, r0
 8003384:	d802      	bhi.n	800338c <_realloc_r+0x34>
 8003386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800338a:	d8f4      	bhi.n	8003376 <_realloc_r+0x1e>
 800338c:	4621      	mov	r1, r4
 800338e:	4638      	mov	r0, r7
 8003390:	f7ff fc3a 	bl	8002c08 <_malloc_r>
 8003394:	4680      	mov	r8, r0
 8003396:	b908      	cbnz	r0, 800339c <_realloc_r+0x44>
 8003398:	4645      	mov	r5, r8
 800339a:	e7ec      	b.n	8003376 <_realloc_r+0x1e>
 800339c:	42b4      	cmp	r4, r6
 800339e:	4622      	mov	r2, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	bf28      	it	cs
 80033a4:	4632      	movcs	r2, r6
 80033a6:	f7ff ffc9 	bl	800333c <memcpy>
 80033aa:	4629      	mov	r1, r5
 80033ac:	4638      	mov	r0, r7
 80033ae:	f7ff fbbf 	bl	8002b30 <_free_r>
 80033b2:	e7f1      	b.n	8003398 <_realloc_r+0x40>

080033b4 <_malloc_usable_size_r>:
 80033b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033b8:	1f18      	subs	r0, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bfbc      	itt	lt
 80033be:	580b      	ldrlt	r3, [r1, r0]
 80033c0:	18c0      	addlt	r0, r0, r3
 80033c2:	4770      	bx	lr

080033c4 <_init>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr

080033d0 <_fini>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr
